import React, {useEffect, useState} from 'react';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import {useNavigate, useParams, useSearchParams} from 'react-router-dom';
import {fetchArtistFeeds, fetchGroupDetails, likeFeed, subscribeToGroup, cancelSubscribe, getIsSubscribed, fetchFeedLikes, getIsLiked } from '../service/GroupService';
import Header from '../components/Header';
import './GroupPage.css';

const GroupPage = () => {
    const navigate = useNavigate();
    const { groupName } = useParams();
    const [searchParams, setSearchParams] = useSearchParams();
    const [enterName, setEnterName] = useState('');
    const [groupDetails, setGroupDetails] = useState(null);
    const [artistFeeds, setArtistFeeds] = useState([]);
    const [isSubscribed, setIsSubscribed] = useState(false);
    const [likedFeeds, setLikedFeeds] = useState({}); // Ï¢ãÏïÑÏöî ÏÉÅÌÉúÎ•º Ï†ÄÏû•Ìï† Í∞ùÏ≤¥

    useEffect(() => {
        const loadGroupDetails = async () => {
            try {
                const details = await fetchGroupDetails(groupName);
                setGroupDetails(details);
            } catch (error) {
                console.log(error.message);
            }
        };

        const loadArtistFeeds = async () => {
            try {
                const feeds = await fetchArtistFeeds(groupName);
                setArtistFeeds(feeds);
                // ÌîºÎìúÏùò Ï¢ãÏïÑÏöî ÏàòÎ•º Í∞ÄÏ†∏Ïò§Îäî Ï∂îÍ∞Ä Î°úÏßÅ
                await Promise.all(feeds.map(async (feed) => {
                    const likesCount = await fetchFeedLikes(groupName, feed.id);
                    feed.likesCount = likesCount; // Í∞ÄÏ†∏Ïò® Ï¢ãÏïÑÏöî ÏàòÎ•º feedÏóê ÏÑ§Ï†ï

                    // Í∞Å ÌîºÎìúÏùò Ï¢ãÏïÑÏöî Ïó¨Î∂ÄÎ•º ÌôïÏù∏
                    const liked = await getIsLiked(groupName, feed.id);
                    setLikedFeeds(prevState => ({
                        ...prevState,
                        [feed.id]: liked // ÌîºÎìú IDÎ•º ÌÇ§Î°ú ÌïòÏó¨ Ï¢ãÏïÑÏöî ÏÉÅÌÉú Ï†ÄÏû•
                    }));
                }));
            } catch (error) {
                console.log(error.message);
            }
        };

        // Íµ¨ÎèÖ Ïú†Î¨¥
        const checkSubscriptionStatus = async () => {
            try {
                const subscribed = await getIsSubscribed(groupName);
                setIsSubscribed(subscribed);
            } catch (error) {
                console.log(error.message);
            }
        };


        loadGroupDetails();
        loadArtistFeeds();
        checkSubscriptionStatus();
        setEnterName(searchParams.get('enter'))
        console.log("enterName : " )
    }, [groupName]);

    // Feed ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ
    const openFeedPopup = (feedId) => {
        if (null == window.localStorage.getItem('accessToken')){
            alert("Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.")
        } else {
            navigate(`/group/${groupName}/feed/${feedId}`); // ÌîºÎìú IDÏóê Îî∞Îùº URL Î≥ÄÍ≤Ω
        }
    };

    // Enter ÌéòÏù¥ÏßÄÎ°ú
    const openEnterPage = () =>
        navigate(`/group/${groupName}/enter/${enterName}`);

    const openCommunityPage = () =>
        navigate(`/group/${groupName}/community`)

    // Íµ¨ÎèÖÎ≤ÑÌäº
    const handleSubscribe = async () => {
        try {
            if (!isSubscribed){
                await subscribeToGroup(groupName);
            } else {
                await cancelSubscribe(groupName);
            }
            // Íµ¨ÎèÖ ÏÉÅÌÉúÎ•º Îã§Ïãú ÌôïÏù∏ÌïòÏó¨ ÏÉàÎ°úÍ≥†Ïπ®
            const subscribed = await getIsSubscribed(groupName);
            setIsSubscribed(subscribed);
        } catch (error) {
            alert("Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.");
        }
    };

    // Ï¢ãÏïÑÏöî or Ï¢ãÏïÑÏöî Ï∑®ÏÜå
    const handleLike = async (feedId) => {
        try {
            await likeFeed(groupName, feedId);

            // Ï¢ãÏïÑÏöî ÏàòÎ•º Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú ÏóÖÎç∞Ïù¥Ìä∏
            const likesCount = await fetchFeedLikes(groupName, feedId);

            // Ï¢ãÏïÑÏöî ÏÉÅÌÉú ÏàòÏ†ï
            setLikedFeeds(prevState => ({
                ...prevState,
                [feedId]: !prevState[feedId] // ÌòÑÏû¨ ÏÉÅÌÉúÎ•º Î∞òÏ†ÑÏãúÌÇ¥
            }));

            setArtistFeeds(prevFeeds =>
                prevFeeds.map(feed =>
                    feed.id === feedId ? { ...feed, likesCount } : feed
                )
            );

        } catch (error) {
            alert("Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.");
        }
    };

    if (!groupDetails) return <div>Loading...</div>;

    return (
        <div className="group-page">
            <Header/>
            <div>
                <div className="nav_btn">
                    <button className="subscript-button" onClick={handleSubscribe}>{isSubscribed ? 'Íµ¨ÎèÖÏ§ë' : 'Íµ¨ÎèÖ'}</button>
                    <button className="notice-button" key={enterName} onClick={() => openEnterPage()}>Í≥µÏßÄÏÇ¨Ìï≠</button>
                    <button className="community-button" onClick={() => openCommunityPage()}>Ïª§ÎÆ§ÎãàÌã∞</button>
                </div>
            </div>
            <div className="group-header">
                <div className="group-image">
                    <img src={groupDetails.artistGroupProfileImageUrl} alt={`${groupDetails.groupName} Ïù¥ÎØ∏ÏßÄ`}/>
                </div>
                <div className="group-info">
                    <h1>{groupDetails.name}</h1>
                    <p>{groupDetails.info}</p>
                    <ul>
                        {groupDetails.artistDtos.map((artist) => (
                            <li key={artist.id}>{artist.artistName}</li>
                        ))}
                    </ul>
                </div>
            </div>
            <div className="artist-feeds">
                <h2>Feed</h2>
                {artistFeeds.map((feed) => (
                    <div className="feed" key={feed.id} onClick={() => openFeedPopup(feed.id)}> {/* ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä */}
                        <div className="feed-header">
                            <img src={feed.profileUrl} alt="Profile" className="profile-image"/>
                            <div className="nickname">{feed.artistName}</div>
                        </div>
                        <div className="feed-content">
                            <p>
                                {feed.contents.length > 100 ? (
                                    <>
                                        {feed.contents.substring(0, 100)}...
                                        <span className="more">ÎçîÎ≥¥Í∏∞</span>
                                    </>
                                ) : (
                                    feed.contents
                                )}
                            </p>
                            {feed.imageUrls && (
                                feed.imageUrls.length > 1 ? (
                                    <Slider dots={true} infinite={true} speed={500} slidesToShow={1} slidesToScroll={1}>
                                        {feed.imageUrls.map((imageUrl, index) => (
                                            <div key={index}>
                                                <img src={imageUrl} alt={`Í≤åÏãúÎ¨º Ïù¥ÎØ∏ÏßÄ ${index + 1}`} style={{width: '100%', borderRadius: '8px'}}/>
                                            </div>
                                        ))}
                                    </Slider>
                                ) : (
                                    <img src={feed.imageUrls[0]} alt="Í≤åÏãúÎ¨º Ïù¥ÎØ∏ÏßÄ" style={{ width: '100%', borderRadius: '8px' }} />
                                )
                            )}
                        </div>
                        <div className="feed-footer">
                            <button onClick={(e) => {
                                e.stopPropagation();
                                handleLike(feed.id);
                            }}>
                                {likedFeeds[feed.id] ? '‚ù§Ô∏è' : 'ü§ç'} {feed.likesCount}
                            </button>
                            <span>üí¨ {feed.commentCount}</span>
                            {/*<button onClick={(e) => { e.stopPropagation(); handleLike(feed.id); }}>Ï¢ãÏïÑÏöî</button>*/}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default GroupPage;
